name: PowerShell CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up PowerShell
      uses: actions/setup-powershell@v2

    - name: Set up secrets as environment variables
      run: |
        echo "TENANT_ID=${{ secrets.TENANT_ID }}" >> $GITHUB_ENV
        echo "CLIENT_ID=${{ secrets.CLIENT_ID }}" >> $GITHUB_ENV
        echo "CERT_PASSWORD=${{ secrets.CERT_PASSWORD }}" >> $GITHUB_ENV
        echo "CERT_PFX=${{ secrets.CERT_PFX }}" >> $GITHUB_ENV

    - name: Install required modules
      run: |
        Install-Module -Name PnP.PowerShell -Force -SkipPublisherCheck
        Install-Module -Name Pester -Force -SkipPublisherCheck

    - name: Run tests
      run: |
        $siteUrl = "https://adstest2025.sharepoint.com"
        $tenantId = $env:TENANT_ID
        $clientId = $env:CLIENT_ID
        $certificatePath = $env:CERT_PFX
        $certificatePassword = $env:CERT_PASSWORD
        
        # 環境変数の確認
        Write-Host "TENANT_ID: $tenantId"
        Write-Host "CLIENT_ID: $clientId"
        Write-Host "CERT_PASSWORD: $certificatePassword"

        if (-not $tenantId -or -not $clientId -or -not $certificatePassword) {
            Write-Host "必要な環境変数が設定されていません。"
            throw "環境変数が不足しています。"
        }

        # 証明書ファイルが存在するか確認
        if (-not (Test-Path $certificatePath)) {
            Write-Host "証明書ファイルが見つかりません: $certificatePath"
            throw "証明書ファイルが存在しません。"
        }

        # 接続処理
        try {
            Connect-PnPOnline -Url $siteUrl -Tenant $tenantId -ClientId $clientId -CertificatePath $certificatePath -CertificatePassword (ConvertTo-SecureString -String $certificatePassword -AsPlainText -Force)
            Write-Host "SharePoint Online に接続しました。"
        } catch {
            Write-Host "接続エラー: $($_.Exception.Message)"
            throw $_
        }

        # Pester テストの実行
        Describe "SharePoint Online Test" {
            It "Should connect to SharePoint Online" {
                $context = Get-PnPContext
                $context | Should -Not -BeNull
            }
        }

        # Pester テストの実行
        Invoke-Pester -Configuration @{
            RunPath = "./Functions.Tests.ps1"
            CodeCoverage = @{
                Enabled = $true
                OutputFormat = "JaCoCo"
                OutputPath = "./coverage.xml"
            }
        }

